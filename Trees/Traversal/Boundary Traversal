
                                // Boundary Traversal //
    
    // GFG: Tree Boundary Traversal
    public static ArrayList<Integer> boundaryTraversal(TreeNode root) {
        ArrayList<Integer> ans=new ArrayList<>();
        if(root.left==null && root.right==null) {
            return ans;
        }
        ans.add(root.data);
        leftB(root, ans);
        leaf(root, ans);
        rightB(root, ans);
        return ans;
    }
    public static void leftB(TreeNode root, List<Integer> list) {
        TreeNode node=root.left;
        if(node==null) {
            return;
        }
        while(node.left!=null || node.right!=null) {
            list.add(node.data);
            if(node.left!=null) {
                node=node.left;
            } else {
                node=node.right;
            }
        }
    }
    public static void rightB(TreeNode root, List<Integer> list) {
        TreeNode node=root.right;
        if(node==null) {
            return;
        }
        int i=0;
        while(node.left!=null || node.right!=null) {
            list.add(list.size()-i, node.data);
            i++;
            if(node.right!=null) {
                node=node.right;
            } else {
                node=node.left;
            }
        }
    }
    public static void leaf(TreeNode root, List<Integer> list) {
        Stack<TreeNode> st = new Stack<>();
        st.push(root);
        while (!st.isEmpty()) {
            TreeNode node = st.pop();
            if (node.right != null) {
                st.push(node.right);
            }
            if (node.left != null) {
                st.push(node.left);
            }
            if (node.left == null && node.right == null) {
                list.add(node.data);
            }
        }
    }
