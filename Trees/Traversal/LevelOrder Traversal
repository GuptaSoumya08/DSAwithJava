
                                // Forming 2D list //

    public static List<List<Integer>> levelOrder(TreeNode root) { // in 1D array
        List<List<Integer>> levelList=new ArrayList<>();
        Queue<TreeNode> queue=new LinkedList<>();
        if(root==null) {
            return levelList;
        }
        queue.add(root);
        while(!queue.isEmpty()) {
            int size=queue.size();
            List<Integer> list=new ArrayList<>();
            for(int i=0; i<size; i++) {
                if(queue.element().left!=null) {
                    queue.offer(queue.element().left);
                }
                if(queue.element().right!=null) {
                    queue.offer(queue.element().right);
                }
                list.add(queue.remove().data);
            }
            levelList.add(list);
        }
        return levelList;
    }



                                        // Forming 1D list //

    public static List<Integer> levelOrder(TreeNode root) { // in 1D array
        List<Integer> list=new ArrayList<>();
        Queue<TreeNode> queue=new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()) {
            TreeNode node=queue.remove();
            list.add(node.data);
            if(node.left!=null) {
                queue.add(node.left);
            }
            if(node.right!=null) {
                queue.add(node.right);
            }
        }
        return list;
    }
