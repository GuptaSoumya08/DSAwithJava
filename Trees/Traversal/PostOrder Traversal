
                                // Using 1 stack //
                                // T(n)=O(n)  &   S(n)=O(n)

    public static List<Integer> postOrderIter(TreeNode root) {
        List<Integer> list=new ArrayList<>();
        if(root==null) {
            return list;
        }
        TreeNode node=root;
        TreeNode temp=null;
        Stack<TreeNode> st=new Stack<>();
        while(!st.empty() || node!=null) {
            if(node!=null) {
                st.push(node);
                node=node.left;
            } else {
                temp=st.peek().right;
                if(temp!=null) {
                    node=temp;
                } else {
                    temp=st.pop();
                    list.add(temp.data);
                    while(!st.empty() && temp==st.peek().right) {
                        temp=st.pop();
                        list.add(temp.data);
                    }
                }
            }
        }
        return list;
    }


                                // Using 2 stacks //
                                // T(n)=O(2n)  &   S(n)=O(2n)

    public static List<Integer> postOrderI(TreeNode root) {
        List<Integer> list=new LinkedList<>();
        if(root==null) {
            return list;
        }
        TreeNode node=null;
        Stack<TreeNode> st1=new Stack<>();
        Stack<Integer> st2=new Stack<>();
        st1.push(root);
        while(!st1.empty()) {
            node=st1.pop();
            st2.push(node.data);
            if(node.left!=null) {
                st1.push(node.left);
            }
            if(node.right!=null) {
                st1.push(node.right);
            }
        }

        while(!st2.empty()) {
            list.add(st2.pop());
        }
        return list;
    }
