                        // N meetings in one room/ Activity Selection/ Disjoint Intervals //

    public static int maxMeetings(int[] start, int[] end) {
        int n=start.length;
        Meeting[] m=new Meeting[n];
        for(int i=0; i<n; i++) {
            m[i]=new Meeting(start[i], end[i], i);
        }
        Arrays.sort(m, new MeetingComparator());
        for(Meeting k: m) {
            System.out.println(k.start+"->"+k.end);
        }
        int cnt=1, lastEnd=m[0].end;
        for(int i=1; i<n; i++) {
            if(lastEnd<=m[i].start) {
                cnt++;
                lastEnd=m[i].end;
            }
        }
        return cnt;
    }

class MeetingComparator implements Comparator<Meeting> {
    @Override
    public int compare(Meeting m1, Meeting m2) {
        if(m1.end<m2.end) {
            return -1;
        } else if(m1.end>m2.end) {
            return 1;
        } else {
            return 0;
        }
    }
}
class Meeting {
    int start;
    int end;
    int pos;
    Meeting(int start, int end, int pos) {
        this.start=start;
        this.end=end;
        this.pos=pos;
    }
}
